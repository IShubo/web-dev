JavaScript Tips and Basic Syntax Cheat Sheet

Quick Tips

    Boolean variable names can start with "is" as a way of denoting its a boolean. 
    Ex: let isLoggedIn = false; // This reads nicely and a good way to identify booleans easily
                vs 
        let loggedin = false; // A bit more ambiguous 

    
    String Template Literal
    Strings created using the "`" back tick key, the key left of 1, same key as tilde, can be used in conjunction with:
    the string "${...}" to allow JavaScript to evaluate the content inside the {}.
    Has to be back ticks ` not the single quote ' .
    Ex: msg = `I have ${5 + 3} apples`;
            output:"I have 8 apples"


    Primitive - Null 
    TODO
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null


    Primitive - Undefined
    TODO
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined
    

    Built in Object - Math
    Simialar to Java where Math is a built in object with methods and properties.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math


    JavaScript Script Tag in HTML
    The "<script></script>" should be put at the end of the "<body></body>" in the HTML file for good practice.

    Truthy-Falsy Values in JS
    The only values which are False-y are:
        false
        0
        "" (empty string)
        null
        undefined
        NaN
    All other values are inherently Truth-y


    Functions vs Methods 
    "A method, like a function, is a set of instructions that perform a task. The difference is that a method is associated with an object, while a function is not."
    https://www.codecademy.com/articles/fwd-js-methods-functions#:~:text=A%20method%2C%20like%20a%20function,while%20a%20function%20is%20not.


Shortcuts 

    Mac - Clear the js console = "cmd + k" 


Section 14 - JavaScript Basics 

    Primitive - "Number"
    JS only uses primitive "Number" to represent both integers and decimals (postive and negative). 
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number 

        The JavaScript Number type is a double-precision 64-bit binary format IEEE 754 value, like double in Java or C#. 
        A Number only keeps about 17 decimal places of precision; arithmetic is subject to rounding. 
        The largest value a Number can hold is about 1.8Ã—10308. Numbers beyond that are replaced with the special Number constant Infinity.

        A number literal like 37 in JavaScript code is a floating-point value, not an integer. 
        There is no separate integer type in common everyday use. 

        Number may also be expressed in literal forms like 0b101, 0o13, 0x0A.

        When used as a function, Number(value) converts a string or other value to the Number type. If the value can't be converted, it returns NaN.


    Comment - "//"
    JS uses "//" to denote comments.


    Number - "NaN" 
    "Not a number" is defined as a "Number" in JS although what it describes and is representing is not actually a number.


    Operator - "typeof"
    Same functionality as "type" in Java.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof


    Operator - "**"
    The exponent operator in JS; can simply use "**" instead of having to call a method such as Math.pow() in Java.


    Statement - "let"
    The "let" statement declares a block-scoped local variable, optionally initializing it to a value.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let


    Statement - "const"
    The "const" statement creates a constant variable that can not be changed.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const


    Naming Conventions - "firstSecondThird..."
    Variables use lower camel case naming conventions, same as Java, and similarly variables do not start with numbers or characters.
        https://developer.mozilla.org/en-US/docs/Glossary/Identifier


Section 15 - JavaScript Strings and More

    String Method - Trim 
    The method ".trim()" will delete extra spaces at the start and end of a string.
    Ex: let userInput = "     hello world!     "
            output: "hello world!" 
        (the variable or original string remains unchanged and only works for space characters)

    
    String Method - IndexOf
    Method ".indexOf()" will find the index of where the argument first appears inside a string, or returns "-1" if it can not be found.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf

    
    String Method - Slice
    Method ".slice()" returns the portion of a string based on the passed arguments. 
    Pass the starting value and ending value, although the ending value is optional.
    Can also pass negative numbers and it will return the last n index's of the string.
    Ex: let msg = "hello world!";
        msg.slice(-3);
            output: "ld!"
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice

    String Method - Replace
    Method ".replace()" takes two arguments to find the first instance of the first argument in a string and it will replace it with the second argument.
    There is a method called ".replaceAll()" although it may not work in all browsers.
    Ex: let msg = "hello world!";
        msg.replace("o", "q");
            output: "hellq world!"
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace


    Built in Object - Math
    Simialar to Java where Math is a built in object with methods and properties.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math


Section 16 - JavaScript Decision Making

    Comparison Operator - "==" (double equals) 
    Checks for equality of value, but not equality of type.
    It coerces both values to the same type and then compares them which can lead to unexpected results.
    Ex: 5 == 5;             // true
        'b' == 'c';         // false
        7 == '7';           // true <--
        0 == '';            // true <--
        true == false;      // false
        0 == false;         // true <--
        null == undefined   // true <--
    
    
    Comparison Operator - "===" (triple equals)
    Checks for equality of value AND TYPE. 
    Same applies for != and !== .
    Ex: 5 === 5;            // true
        1 === 2;            // false
        2 === '2';          // false
        false === 0;        // false

        10 != '10';         // false <--
        10 !== '10';        // true 


    Object - console.log()
    Prints the argument to console. 
        https://developer.mozilla.org/en-US/docs/Web/API/Console/log
    

    Method - Alert
    Displays an alert dialog with the optional specified content and an OK button.
        https://developer.mozilla.org/en-US/docs/Web/API/Window/alert
    

    Method - Prompt
    Displays a dialog with an optional message prompting the user to unput some text.
        https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt


Section 17 - JavaScript Arrays

    Useful Array methods:
            .push()
            .pop()
            .shift()
            .unshift()
            .concat()
            .indexOf()
            .includes()
            .reverse()
            .slice()
            .splice()
            .sort()
            

    Method - Push
    .push() adds one or more elements to the end of an array and returns the new length of the array.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push


    Method - Pop 
    .pop() removes the last element from an array and returns that element. 
    This method changes the length of the array.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop


    Method - Shift
    .shift() method removes the first element from an array and returns that removed element. 
    This method changes the length of the array.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift


    Method - Unshift
    .unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift

    
Section 18 - JavaScript Object Literals

    Objects - 
        Objects are typically made using "const" instead of "let" although both can be used. 
        "Const" does NOT create immutable variables, instead it creates immutable bindings. 
            https://stackoverflow.com/questions/44604212/when-to-use-const-with-objects-in-javascript#:~:text=According%20to%20ES6%2DFeatures.org,itself%20can%20still%20be%20altered.


Section 19 - Repeating Stuff With Loops

    Statement - For (LOOP)
        For loops in JavaScript work in same manner and syntactically as in Java.
        Ex: for (let [initialization]; [condition]; [final-expression]) {
                statement
            }
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for
    

    Statement - While (LOOP)
        While loops in JavaScript work in same manner and syntactically as in Java.
        Ex: while (condition) {
                statement
            }
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while


    Statement - For Of (LOOP)
        For-of loops in JavaScript let you iterate through iterables in a simpler fashion that creating a for loop.
        Ex: for (let [variable] of [iterable]) {
            statement
        }     
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of


    Function - .isNaN 
        "isNaN()" is used to check if a value is NaN but works a bit oddly. 
        In Section 19 - ToDo List Project Code Along, Numbers.isNaN is used and it works slightly differently. 
        MDN describes it the best in the different ways it can be used and what other ways to check if a value is NaN.
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN 
        

Section 20 - Introducing Functions

    Statement - return 
        The "return" statement ends function execution and specifies a value to be returned to the function caller.
        The usefulness of using "return" in our functions or methods is that it lets us get output from a function or method, 
        while also being able to save and manipulate the output further, whereas printing (console.log()'ing) does not 
        allow us to do this, those outputs are "undefined" and can not be stored.

        Return also can only return ONE value, although the value could hold more values/data (such as an array) but only thing.

        Ex: function add(x y){
            return x + y; 
        }
        const sum = add(2, 6);
        sum; //8

        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return





